openapi: '3.0.2'
info:
  description: "Segundo sprint"
  title: Delilah Resto
  version: '1.0'
  contact:
    email: "enriquemailush@gmail.com"
servers:
  - url: http://localhost:3001/
tags:
- name: "users"
  description: "registro de usuarios"
- name: "login"
  description: "login de usuarios registrados"
- name: "products"
  description: "productos del restaurant"
- name: "orders"
  description: "pedidos que realizan los usuarios"
- name: "payments"
  description: "tipos de pago que puede utilizar el usuario"
paths:
  /users:
    get:
      security:
        - bearerAuth: []      
      summary: Muestra los usuarios registrados.
      tags: 
      - users
      description: Muestra usuarios registrados.      
      responses:
        '200':
          description: OK
    post:
      summary: Crea un usuario.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
      tags: 
      - users
      description: Registro nuevo usuario.      
      responses:
        '200':
          description: OK
  /users/{id}:
    put:
      security:
        - bearerAuth: []
      summary: Modifica los datos de un usuario.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: id usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/usersEdit'
      tags: 
      - users
      description: modifica usuarios     
      responses:
        '200':
          description: OK
    delete:
      security:
        - bearerAuth: []
      summary: Elimina un usuario.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: id usuario
      tags: 
      - users
      description: elimina usuarios
      responses:
        '200':
          description: OK
  /login:
    post:
      summary: Login del usuario registrado.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
      tags: 
      - login
      description: Muestra productos disponibles.      
      responses:
        '200':
          description: Token

  /products:
    get:
      summary: Muestra productos.
      tags: 
      - products
      description: Muestra productos disponibles.      
      responses:
        '200':
          description: OK
    post:
      security:
        - bearerAuth: []
      summary: Crea un producto.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/products'
      tags: 
      - products
      description: Crea nuevos productos.      
      responses:
        '200':
          description: OK
  /products/{id}:
    put:
      security:
        - bearerAuth: []
      summary: Modifica un producto.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: id producto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/products'
      tags: 
      - products
      description: modifica productos     
      responses:
        '200':
          description: OK
    delete:
      security:
        - bearerAuth: []
      summary: Elimina una forma de pago.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: id producto
      tags: 
      - products
      description: elimina productos
      responses:
        '200':
          description: OK
  
  /orders:
    get:
      summary: Muestra el menu.
      tags: 
      - orders
      description: Muestra productos disponibles.      
      responses:
        '200':
          description: OK
    post:
      security:
        - bearerAuth: []
      summary: Crea un pedido.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orders'
      tags: 
      - orders
      description: Crea nuevos pedidos.      
      responses:
        '200':
          description: OK
  /orders/{id}:
    get:
      security:
        - bearerAuth: []
      summary: Muestra historial de pedidos.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: id pedido
      tags: 
      - orders
      description: muestra pedidos usuario
      responses:
        '200':
          description: OK
    put:
      security:
        - bearerAuth: []
      summary: Usuario modifica el pedido.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: id pedido
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ordersEdit'
      tags: 
      - orders
      description: modifica pedidos
      responses:
        '200':
          description: OK
    delete:
      security:
        - bearerAuth: []
      summary: Elimina un pedido.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: id pedido
      tags: 
      - orders
      description: elimina pedidos
      responses:
        '200':
          description: OK
  /orders/admin/{id}:
    put:
      security:
        - bearerAuth: []
      summary: Administrador modifica estado del pedido.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: id pedido
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ordersAdmin'
      tags: 
      - orders
      description: Crea nuevos pedidos.      
      responses:
        '200':
          description: OK
  /payments:
    get:
      summary: Muestra formas de pago.
      tags: 
      - payments
      description: Muestra formas de pago.      
      responses:
        '200':
          description: OK
    post:
      security:
        - bearerAuth: []
      summary: Crea una forma de pago
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/payments'
      tags: 
      - payments
      description: Crea nuevas formas de pago.      
      responses:
        '200':
          description: OK
  /payments/{id}:
    put:
      security:
        - bearerAuth: []
      summary: Modifica una forma de pago.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: id forma de pago
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/payments'
      tags: 
      - payments
      description: modifica formas de pago
      responses:
        '200':
          description: OK
    delete:
      security:
        - bearerAuth: []
      summary: Elimina una forma de pago.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: id forma de pago
      tags: 
      - payments
      description: elimina formas de pago
      responses:
        '200':
          description: OK
  /address:
    get:
      security:
          - bearerAuth: []
      summary: Muestra domicilios de usuario logueado.
      tags: 
      - address
      description: Muestra agenda de direcciones al usuario logueado.      
      responses:
        '200':
          description: OK
    post:
      security:
        - bearerAuth: []
      summary: Crea un domicilio en la agenda del usuario.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/address'
      tags: 
      - address
      description: Crea nuevos domicilios.      
      responses:
        '200':
          description: OK
  /address/{id}:
    put:
      security:
        - bearerAuth: []
      summary: Modifica un domicilio.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: id domicilio
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/address'
      tags: 
      - address
      description: modifica domicilios.
      responses:
        '200':
          description: OK
    delete:
      security:
        - bearerAuth: []
      summary: Elimina un domicilio.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: id domicilio
      tags: 
      - address
      description: elimina domicilios
      responses:
        '200':
          description: OK        
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    users:
      properties:
        userName:
          type: string
        fullName:
          type: string
        email:
          type: string
        phone:
          type: string
        address:
          type: string
        password:
          type: string
    usersEdit:
      properties:
        fullName:
          type: string
        email:
          type: string
        phone:
          type: string
        address:
          type: string
        password:
          type: string
    login:
      properties:
        userName:
          type: string
        password:
          type: string
    products:
      properties:
        productName:
          type: string
        price:
          type: integer
    orders:
      properties:
        productId:
          type: integer 
        quantity:
          type: integer
        closed:
          type: boolean
    ordersEdit:
      properties: 
        quantity:
          type: integer
        closed:
          type: boolean
    ordersAdmin:
      properties:
        orderType:
          type: integer
    payments:
      properties:
        type:
          type: string
        available:
          type: boolean
    address:
      properties:
        address:
          type: string